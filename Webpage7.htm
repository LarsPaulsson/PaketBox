<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Serial Port Control</title>
</head>
<body>
    <h1>Styr relä via aerieport</h1>
Start: Koppla ur 12V och klicka på denna för att välja serieport
    <button id="connect">Start</button>
Koppla sedan in 12V.

    <div>
        <button id="pulseDTR">Puls DTR</button>
<br>
<br>
 </div>
    <div>
        <button id="setDTR">Set DTR pin 4 +10V</button>
        <button id="clrDTR">Clear DTR -10V</button>
     
<br>
        <button id="setRTS">Set RTS pin 7 +10V</button>
        <button id="clrRTS">Clear RTS -10V</button>
     
    </div>
    <div>

        <p>DCD pin 1: <span id="dcd">Väntar</span></p>
        <p>CTS pin 6: <span id="dsr">Väntar</span></p>
        <p>CTS pin 8: <span id="cts">Väntar</span></p>
        <p>RI pin 9: <span id="ri">Väntar</span></p>
    </div>

    <script>
        let port;
console.log('Program start');
// readSignals();
/*
dictionary SerialOptions {
  [EnforceRange] required unsigned long baudRate;
  [EnforceRange] octet dataBits = 8;
  [EnforceRange] octet stopBits = 1;
  ParityType parity = "none";
  [EnforceRange] unsigned long bufferSize = 255;
  FlowControlType flowControl = "none";
};
*/

        document.getElementById('connect').addEventListener('click', async () => {
            try {
                port = await navigator.serial.requestPort();
                await port.open({ baudRate: 9600 });
             	await port.setSignals({ dataTerminalReady: false });  // Ger -10V på pin 4
		await port.setSignals({ requestToSend: false }); // Ger -10V på pin 7
                console.log('Connected to port');
                readSignals();
            } catch (error) {
                console.error('Error connecting to port:', error);
            }
        });


        document.getElementById('setRTS').addEventListener('click', async () => {
            if (port) {
                await port.setSignals({ requestToSend: true }); // Ger +10V på pin 7
                console.log('RTS set');
            }
        });

        document.getElementById('setDTR').addEventListener('click', async () => {
            if (port) {
                await port.setSignals({ dataTerminalReady: true });  // Ger +10V på pin 4
                console.log('DTR set');
            }
        });


        document.getElementById('clrRTS').addEventListener('click', async () => {
            if (port) {
                await port.setSignals({ requestToSend: false }); // Ger -10V på pin 7
                console.log('RTS clr');
            }
        });

        document.getElementById('clrDTR').addEventListener('click', async () => {
            if (port) {
                await port.setSignals({ dataTerminalReady: false });  // Ger -10V på pin 4
                console.log('DTR clr');
            }
        });

       document.getElementById('pulseDTR').addEventListener('click', async () => {
            if (port) {
                await port.setSignals({ dataTerminalReady: true });  // Ger +10V på pin 4
		await new Promise(resolve => setTimeout(resolve, 500));

                await port.setSignals({ dataTerminalReady: false });  // Ger -10V på pin 4
                console.log('Pulsed DTR clr');

            }
        });

// Turn off Serial Break signal.
// await port.setSignals({ break: false });

        async function readSignals() {
/*
const ports = await navigator.serial.getPorts();
    if(ports.length==0) {
         port = await navigator.serial.requestPort();
     }else{
         port=ports[0];
     }
     await port.open({ baudRate: 9600 });
*/
   
            while (port) {
                const signals = await port.getSignals();
                document.getElementById('dcd').textContent = signals.dataCarrierDetect ? 'Active +10V' : 'Inactive 0V';
                document.getElementById('dsr').textContent = signals.dataSetReady ? 'Active +10V' : 'Inactive 0V';
                document.getElementById('cts').textContent = signals.clearToSend ? 'Active +10V' : 'Inactive 0V';
                document.getElementById('ri').textContent = signals.ringIndicator ? 'Active +10V' : 'Inactive 0V';

                await new Promise(resolve => setTimeout(resolve, 100));
            }
        }
    </script>
</body>
</html>
