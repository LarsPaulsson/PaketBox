<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Serial Port Communication</title>
</head>
<body>
  <h1>Serial Port Communication</h1>
  <button id="connect">Connect</button>
  <button id="disconnect">Disconnect</button>
  <input type="text" id="sendid" name="sendname" placeholder="enter message here">
  <button id="send">Send</button>
  <p id="result"></p>
  <pre id="output"></pre>

  <script>

    let portstate=0;    // 0 not connected, 1 running
    let globalSearch=false;
    let port;
    let reader;
    let inputDone;
    let outputDone;
    let inputStream;
    let outputStream;
    let output = document.getElementById('output');
    let result = document.getElementById('result');

    async function withTimeout(promise, timeout) {
        return Promise.race([
        promise,
        new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Operation timed out')), timeout)
        )
        ]);
    }


    async function connectPort () {
        try {

            const ports = await navigator.serial.getPorts();
            const nports = ports.length;
            console.log('connectPort: ports.length:'+nports);
            if(nports==1) {
                port=ports[0];      // No need to ask, try this
            }
            if (port==null) {       // If still no port
                port = await navigator.serial.requestPort();  // Ask User for permission and select port
            }
                await port.open({ baudRate: 9600 });

                const textDecoder = new TextDecoderStream();
                inputDone = port.readable.pipeTo(textDecoder.writable);
                inputStream = textDecoder.readable;

                reader = inputStream.getReader();
//                readLoop();

                const textEncoder = new TextEncoderStream();
                outputDone = textEncoder.readable.pipeTo(port.writable);
                outputStream = textEncoder.writable;

                portstatus=1;

            } catch (error) {
                result.textContent='Error:'+err;
                console.error('There was an error opening the serial port:', error);
            }
    };

    async function disconnectPort () {
        console.log('disconnectPort');
        portstatus=0;
        try {
            if (reader) {
                await reader.cancel();
                await inputDone.catch(() => {});
                reader = null;
                inputDone = null;
            }
            if (outputStream) {
                await outputStream.getWriter().close();
                await outputDone;
                outputStream = null;
                outputDone = null;
            }
            await port.close();
            port = null;
        } catch (err) {
            result.textContent='Error:'+err;
            console.error('Error:', err);
        }
    };

    async function sendtoPort (inputValue) {
    try {
      const writer = outputStream.getWriter();
      await writer.write(inputValue+'\r\n');
      writer.releaseLock();
        } catch (err) {
            result.textContent='Error:'+err;
            console.error('Error:', err);
        }
    }

    async function sendtoPortwithTimeout (inputValue) {
    try {
        // Wait for the async operation, but with a 2-second timeout
        const result = await withTimeout(sendtoPort(inputValue), 2000);
        console.log("sendtoPort:"+inputValue);
    } catch (error) {
        console.error(error.message);  // Output: 'Operation timed out'
    }
    }

    async function sendReceivePort (inputValue) {
    let result;

    globalSearch=true;
/*    try { result = await withTimeout(readForever(), 1000); } catch (error) {
        globalSearch=false;
        console.log("Flushed time-out");

    }
    */
   // await syncRead(100);
   result = await withTimeout(readLine(), 3000);
   result = await withTimeout(readLine(), 3000);

console.log("Flushed!");
await new Promise(resolve => setTimeout(resolve, 2000)); 

    try {
        // Wait for the async operation, but with a 2-second timeout
        result = await withTimeout(sendtoPort(inputValue), 2000);
        console.log("sendtoPort:"+inputValue);
//        await new Promise(resolve => setTimeout(resolve, 2000)); 

 result = await withTimeout(readLine(), 3000);
 console.log("Line read!");
 // readLine();
    } catch (error) {
        console.error(error.message);  // Output: 'Operation timed out'
    }

    }

    // document.getElementById('connect').addEventListener('click', async () => {
    document.getElementById('connect').addEventListener('click', connectPort );
            //    document.getElementById('disconnect').addEventListener('click', async () => {
    document.getElementById('disconnect').addEventListener('click', disconnectPort );

    document.getElementById('send').addEventListener('click', async () => {
    try {
      var inputElement = document.getElementById("sendid");
      var inputValue = inputElement.value;
      await sendReceivePort(inputValue);

    } catch (err) {
            result.textContent='Error:'+err;
            console.error('Error:', err);
        }
    });


    navigator.serial.addEventListener('disconnect', (event) => {
            if (port === event.target) {
                console.log('Port disconnected:', event.target);
                port = null;
            }
        });

    navigator.serial.addEventListener('connect', (event) => {
            console.log('Port connected:', event.target);
        });

// Function to flush the serial input (clear the buffer)
/* async function flushSerialInput() {
  if (reader) {
    // Cancel the current reader to stop reading and release it
    await reader.cancel();
    await inputDone.catch(() => {});
    reader = null;
    inputDone = null;
    console.log('Serial input flushed');
  }
    // Reinitialize the reader if needed
    // reader = port.readable.getReader();
    reader = inputStream.getReader();

}
*/

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}


async function readwithTimeout() {
    const { value, done } = await withTimeout(reader.read(), 200);
    return(value);
//    const { value, done } = reader.read();    // wait for input
}



async function syncRead(n) {
    let i=0;
    while (i < 10) {
        try {
 //           const { value, done } = reader.read();    // wait for input
            readwithTimeout();
            // console.log('Flushed:'+value);
            await new Promise(resolve => setTimeout(resolve, 100));

        } catch (err) {
                result.textContent='Error:'+err;
                console.error('Error:', err);
        }
        i++;
        }
    console.log('syncRead End');
     }

    async function readForever() {
        while (globalSearch) {
        try {
            const { value, done } = await reader.read();    // wait for input
            console.log('Flushed:'+value);

        } catch (err) {
                result.textContent='Error:'+err;
                console.error('Error:', err);
        }
        }
     }
 

    async function readLine() {
        let lineBuffer = '';
        let i=0;
        // let mstate=0;   // 0 seek for start, 1 seek for end
        // let asciiValue=0;

        while (true) {
        try {
        const { value, done } = await reader.read();    // waits for input
        if (done) {
          reader.releaseLock();
          result.textContent='End of Stream';
          break;
        }
        
        console.log('Received:'+value);
        /* if (mstate==0) {
            // i=lineBuffer.indexOf('\n');
            asciiValue = value.charCodeAt(0);
            if (asciiValue<32) {


            }
        }
            */
        lineBuffer += value;

        i=lineBuffer.indexOf('D');
        console.log('D:'+i);

        i=lineBuffer.indexOf('\n');
        console.log('newline:'+i);

        i=lineBuffer.indexOf('\r');
        console.log('return:'+i);


//        while ((newlineIndex = lineBuffer.indexOf('\n')) >= 0) {
//             const line = lineBuffer.slice(0, newlineIndex + 1).trim();
//             lineBuffer = lineBuffer.slice(newlineIndex + 1);
                            // Display the received line on the page
//                    document.getElementById('output').textContent += line + '\n';
  //              }
           if (i>0) {
             output.textContent += lineBuffer;
             console.log('Received:'+lineBuffer);
             break;
           }
        } catch (err) {
                result.textContent='Error:'+err;
                console.error('Error:', err);
           }
        }
    }

    async function readLoop() {
        await new Promise(resolve => setTimeout(resolve, 2000)); 
      while (true) {
        try {

        const { value, done } = await reader.read();    // waits for input
        if (done) {
          reader.releaseLock();
          result.textContent='End of Stream';
          break;
        }
        // const outdecoder = new TextDecoder();
        // output.textContent += outdecoder.decode(value);
        output.textContent += value;

        } catch (err) {
                result.textContent='Error:'+err;
                console.error('Error:', err);
                await new Promise(resolve => setTimeout(resolve, 1000));    // cool down loop
                disconnectPort();
                const ports = await navigator.serial.getPorts();
                const nports = ports.length;
                console.log('Reconnect ports.length:'+nports);
                if(nports==1) {
                    connectPort();
                    await new Promise(resolve => setTimeout(resolve, 2000));    // cool down loop
                }
           }
        }
    }

connectPort();

// readLoop();

  </script>
</body>
</html>
