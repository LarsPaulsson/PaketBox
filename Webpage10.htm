<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PaketBox</title>
</head>
<body>
    <h1>Styr PaketBox via Swish</h1>
Start: Koppla ur 12V och klicka på denna för att välja serieport
    <button id="connect">Start</button>
Koppla däreftr in 12V.

    <div>
        <button id="pulseDTR">Puls DTR</button>
<br>
<br>
 </div>
    <div>
        <button id="setDTR">Set DTR pin 4 +10V</button>
        <button id="clrDTR">Clear DTR -10V</button> 
        <br>
        <button id="setRTS">Set RTS pin 7 +10V</button>
        <button id="clrRTS">Clear RTS -10V</button>     
    </div>
    <div>
    Websocket Meddelande in<br>
        Händelse: <span id="Message1">-</span><br>
        Rubrik: <span id="Message2">-</span><br>
        Text: <span id="Message3">-</span><br>
    </div>
    <div>
        <button id="sound1">Ljud 1</button>
        <button id="sound2">Ljud 2</button> 
        <button id="sound3">Ljud 3</button>
        <button id="sound4">Ljud 4</button>     
    </div>
    <div>
        PaketBox<br>
        Händelse: <span id="Box1">-</span><br>
        Händelse: <span id="Box2">-</span><br>
    </div>
    <img src="img/image1.png" width="400" height="400">
    <img src="img/image2.png" width="400" height="400">

    <script>
        let port;
console.log('Program start');
const accessToken = 'o.2fBO20OkMwk7EzsQkSMGQiNzjwEKS4ra'; // Din Pushbullet API-nyckel

// Skapa en WebSocket-anslutning till Pushbullet
const socket = new WebSocket(`wss://stream.pushbullet.com/websocket/${accessToken}`);

// Lyssna efter WebSocket-anslutningens öppnande
socket.onopen = function(event) {
    showSocket("Ansluten till Pushbullet!","","");
    console.log("WebSocket ansluten till Pushbullet!");
};

// Hantera inkommande meddelanden från Pushbullet
socket.onmessage = function(event) {
    const data = JSON.parse(event.data);
    let l2="";
    let l3="";
    let audio;
    console.log("socket.onmessage:", data.type);

    // Kontrollera om det är ett pushmeddelande
    if (data.type === 'push') {
        console.log("push:", data.push);
        if (data.push.type === 'mirror') {
            console.log(`application_name: ${data.push.application_name}`);
            console.log(`title: ${data.push.title}`);
            console.log(`body: ${data.push.body}`);
            try {
             l1=`${data.push.application_name}`;
             l2=`${data.push.title}`;
             l3=`${data.push.body}`;
            }
            catch {    }
            showSocket(l1,l2,l3);
            switch (l1) {
                case "Pushbullet":
                    showBox("Test öppnar");
                    document.getElementById('pulseDTR').click();
                    audio = new Audio('mp3/pusbullet.mp3'); audio.play();
                    break;
                case "Tapo":
                    audio = new Audio('mp3/tapo.mp3'); audio.play();
                    break;
                case "Swish":
                    showBox("Swish öppnar");
                    document.getElementById('pulseDTR').click();
                    audio = new Audio('mp3/swish.mp3'); audio.play();
                    break;
            
                default:
                    break;
            }
            
        }
    }
};

// Hantera eventuella fel med WebSocket
socket.onerror = function(error) {
    console.error("WebSocket fel:", error);
    showSocket("socket.onerror",error,"");
};

// Stäng WebSocket-anslutningen när det behövs
socket.onclose = function(event) {
    console.log("WebSocket stängd.");
    showSocket("socket.onclose","","");
};

function showSocket(line1,line2,line3) {
        document.getElementById('Message1').textContent = line1;
        document.getElementById('Message2').textContent = line2;
        document.getElementById('Message3').textContent =  line3;
}
function showBox(line1,line2,line3) {
        document.getElementById('Box1').textContent = line1;
        document.getElementById('Box2').textContent = line2;
}
function playSound() {
            const audio = new Audio('mp3/file.mp3');
            audio.play();
        }

document.getElementById('sound1').addEventListener('click', async () => {
    try {
        const audio = new Audio('mp3/sound1.mp3'); audio.play();
    } catch{};
});
document.getElementById('sound2').addEventListener('click', async () => {
    try {
        const audio = new Audio('mp3/sound2.mp3'); audio.play();
    } catch{};
});
document.getElementById('sound3').addEventListener('click', async () => {
    try {
        const audio = new Audio('mp3/sound3.mp3'); audio.play();
    } catch{};
});
document.getElementById('sound4').addEventListener('click', async () => {
    try {
        const audio = new Audio('mp3/sound4.mp3'); audio.play();
    } catch{};
});
// readSignals();
/*
dictionary SerialOptions {
  [EnforceRange] required unsigned long baudRate;
  [EnforceRange] octet dataBits = 8;
  [EnforceRange] octet stopBits = 1;
  ParityType parity = "none";
  [EnforceRange] unsigned long bufferSize = 255;
  FlowControlType flowControl = "none";
};
*/

        document.getElementById('connect').addEventListener('click', async () => {
            try {
                port = await navigator.serial.requestPort();
                await port.open({ baudRate: 9600 });
             	await port.setSignals({ dataTerminalReady: false });  // Ger -10V på pin 4
		await port.setSignals({ requestToSend: false }); // Ger -10V på pin 7
                console.log('Connected to port');
                readSignals();
            } catch (error) {
                console.error('Error connecting to port:', error);
            }
        });


        document.getElementById('setRTS').addEventListener('click', async () => {
            if (port) {
                await port.setSignals({ requestToSend: true }); // Ger +10V på pin 7
                console.log('RTS set');
            }
        });

        document.getElementById('setDTR').addEventListener('click', async () => {
            if (port) {
                await port.setSignals({ dataTerminalReady: true });  // Ger +10V på pin 4
                console.log('DTR set');
            }
        });


        document.getElementById('clrRTS').addEventListener('click', async () => {
            if (port) {
                await port.setSignals({ requestToSend: false }); // Ger -10V på pin 7
                console.log('RTS clr');
            }
        });

        document.getElementById('clrDTR').addEventListener('click', async () => {
            if (port) {
                await port.setSignals({ dataTerminalReady: false });  // Ger -10V på pin 4
                console.log('DTR clr');
            }
        });

       document.getElementById('pulseDTR').addEventListener('click', async () => {
            if (port) {
                await port.setSignals({ dataTerminalReady: true });  // Ger +10V på pin 4
		await new Promise(resolve => setTimeout(resolve, 500));

                await port.setSignals({ dataTerminalReady: false });  // Ger -10V på pin 4
                console.log('Pulsed DTR clr');

            }
        });

// Turn off Serial Break signal.
// await port.setSignals({ break: false });

/*        async function readSignals() {
   
            while (port) {
                const signals = await port.getSignals();
                document.getElementById('dcd').textContent = signals.dataCarrierDetect ? 'Active +10V' : 'Inactive 0V';
                document.getElementById('dsr').textContent = signals.dataSetReady ? 'Active +10V' : 'Inactive 0V';
                document.getElementById('cts').textContent = signals.clearToSend ? 'Active +10V' : 'Inactive 0V';
                document.getElementById('ri').textContent = signals.ringIndicator ? 'Active +10V' : 'Inactive 0V';

                await new Promise(resolve => setTimeout(resolve, 100));
            }
        }
*/
    </script>
</body>
</html>
