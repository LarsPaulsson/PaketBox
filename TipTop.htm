<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Swisha och tanka!</title>
</head>
<body>
<style>
.usertable {
    border-collapse: collapse;
    font-size: 40px;
    color: white;
    background-color: #2d5e17;
    margin: 0 auto; /* Center the table itself */
    text-align: center; /* Center the content in the table */
    width: 80%; /* Optional: define the table width */
    height:80%;       
  }
th, td {
    padding: 8px;
    text-align: center;
    border: 1px solid black;
  
  }
th {
    background-color: #f2f2f2;
}

.devtable {
    background-color: white;
}

.bigbutt {
    padding: 10px 20px;  /* Adjusts the space inside the button */
    font-size: 24px;      /* Increases the size of the text inside */
    width: 10%px;   /* Set button width */
    height:10%;   /* Set button height */
      /* margin: 20px; */ /* Adds 20px space outside the button on all sides */
      margin: 10px 10px 10px 10px; /* Top, Right, Bottom, Left */
      background-color: #400de7;
      color: white;
      border: black;
      border-radius: 5px;
      cursor: pointer;
      text-decoration: none;
      text-align: center;
      line-height: 50px;   
}

.tankpre {
            // position: absolute;
            // top: 620px;  /* Adjust the top position */
            // left:400px;  /* Adjust the left position */
            width: 500px;
            height: 200px;
            background-color: #f4f4f4;
            border: 1px solid #ddd;
            padding: 10px;
}
</style>

<table class="usertable">
    <tr><td><div id="line1"></div></td></tr>
    <tr><td><div id="line2"></div></td></tr>
    <tr><td><div id="line3"></div></td></tr>
    <tr><td><div id="line4"></div></td></tr>
    <tr><td><div id="line5"></div></td></tr>
    <tr><td><div id="line6"></div></td></tr>
</table>



<div id="dev">
<table class="devtable">
    <tr><td>State</td><td>Timer</td><td>Tillgängliga</td><td>Vara</td><td>Pulser</td><td>Räknare</td><td>Tid kvar</td><td>PumpState</td></tr><tr></tr>
    <tr>
        <td><div id="idState">-</div></td>
        <td><div id="idTimer">-</div></td>
        <td><div id="idAvailable">-</div></td>
        <td><div id="idProduct"></div></td>
        <td><div id="idPulses"></div></td>
        <td><div id="idCounter" >-</div></td>
        <td><div id="idTimeleft" >-</div></td>
        <td><div id="idPumpState" >-</div></td>
        </tr>
</table>
<pre class="tankpre" id="output"></pre>

</div>

<script src="js/SerialPort.js"></script>
<script src="js/Util.js"></script>
<script>

window.onload = function() {
    changeState(0);
};

    s0=[
    "Välkommen till Östadlund AB",
    'Här finns att hämta',
    '-',
    '-',
    '-',
    '<button class="bigbutt" id="sel4butt" onclick="changeState(1)">Klicka/tryck här för att starta</button>'
    ];
    s1=[
    'Handla i automaten',
    '-Medtag eget kärl för varan',
    '-Bestäm vara och mängd på pekskärmen',
    '-Betala med Swish',
    'Obs! Levered mängd kan avvika med +- 15%',
    '<button class="bigbutt" id="sel4butt" onclick="changeState(2)">Klicka här för att acceptera dessa villkor</button>'
    ];

    s2=[
    '-',
    'Välj ev annan vara nedan',
    '<button class="bigbutt" id="incutt" onclick="select(-1)">Förra</button><button class="bigbutt" id="decbutt" onclick="select(1)">Nästa</button>',
    '-',
    '<button class="bigbutt" id="decbutt" onclick="select(-2)">- Minska</button><button class="bigbutt" id="incbutt" onclick="select(2)">+ Öka</button>',
    '<button class="bigbutt" id="sel4butt" onclick="changeState(3)">Till betalning</button>'
    ];
    s3=[
    "Swisha",
    '-',
    '-',
    '-',
    '-',
    '<button class="bigbutt" id="selbutt" onclick="payment(10)">Hämta</button>'
    ];
    s4=[
    "Hämta",
    '-',
    'Pumpen är nu öppen, håll inne pumpens knapp för att tanka',
    '-',
    '-',
    '-'
    ];
    s5=[
    'Sessionen avslutas',
    '-',
    '-',
    '-',
    'Tack för besöket',
    'Välkommen åter'
    ];

    let price=100.0;
    let kilos=0.0;

    function changeTable(s) {
            line1.innerHTML=s[0];
            line2.innerHTML=s[1];
            line3.innerHTML=s[2];
            line4.innerHTML=s[3];
            line5.innerHTML=s[4];
            line6.innerHTML=s[5];
    }

function changeState(newstate) {
        // if (newstate<pages.length) {
          sessionstate=newstate;
          idState.textContent=sessionstate;
          /// navigateIframe(pages[newstate]);

        
        switch (newstate) {
        case STATE_PAUSE:
            changeTable(s0);
            sessiontimer=TIMEPAUSEPAGE;

            break;
        case STATE_STARTING:
            changeTable(s1);
            sessiontimer=60;
            break;
        case STATE_SELECTING:
            changeTable(s2);
            newproduct(pump);
            sessiontimer=60;
        break;
        case STATE_PAYING:
            changeTable(s3);
            newproduct(pump);
            sessiontimer=60;
            break;
        case STATE_DELIVER: 
            changeTable(s4);
            newproduct(pump);
            // newprice(price);
            sessiontimer=60;
         
            kilos=price/productnow.price;
            pulsespaid=Math.round(kilos*productnow.pulses);
            idPulses.textContent=pulsespaid.toFixed(0);
            startPump();
        break;
        case STATE_FINISH:
            changeTable(s5);
            newproduct(pump);
            line6.textContent=sessionresult;
            sessiontimer=20;
        break;
       /* case MSG_LOADED:
            // logg(10, "MSG_LOADED");
            sendiframe(sessionobj);
            break;
        */
        }
      }

function newproduct(p) {
    if (p<0) p=prods.length-1;
    if (p>=prods.length) p=0;
    productindex=p;
    pump=p;
   
    productnow=prods[productindex];
    idProduct.textContent=productnow.number;
    line2.textContent="Pump "+productnow.number+" har "+productnow.volume+" kg "+productnow.name+" "+productnow.price+" kr/kg";
    document.body.style.backgroundImage = 'url('+productnow.image+')';
    // console.log ("PROD img="+productnow.image);
    // line2.textContent=productnow.price+" kr/kg";
    newprice(price);
}

function newprice(p) {
    if (p<10) p=10;
    if (p>100) p=100;
    price=p;
    // line5.textContent="Belopp "+p+" kr";
    kilos=p/productnow.price;
    line4.textContent="Belopp "+p+" kr"+" motsvarar "+kilos.toFixed(1)+" kg"
}

function select(newsel) {

    sessiontimer=60;
    switch (newsel) {
    case 0: msg.command=STATE_PAYING;
            msg.productnumber=productindex;
            msg.price=price;
            changeState(STATE_PAYING);
            // sendup(msg); break;
    case -1: newproduct(productindex-1); break;
    case 1: newproduct(productindex+1); break;
    case -2: newprice(price-1); break;
    case 2: newprice(price+1); break;
    }
}

let sessionstate=0;
let sessionresult="Okänt avslut";
let paid=0;
const TIMEOUT=30;
const TIMEPAUSEPAGE=5;
let pumpstate=0;
let pumptimer=0;
let pump=0;
let pulsespaid=0;
let pulsestart=0;
let pcount=0;
let d6=0;
const sessionobj = { productnumber: "0", pulsespaid: 0, pulsesnow: 0 };

let sessioninterval = setInterval(timerState, 1000);
let sessiontimer=0;
let msg={};

const images = [
              'url("img/image1.jpg")',
              'url("img/image2.jpg")',
              'url("img/image3.jpg")',
              'url("img/image4.jpg")'
            ];
  
//    let imagenumber=0;
//    document.body.style.backgroundImage = images[imagenumber];
function payment(n) {
       paid=n;
       newprice(paid);
       changeState(STATE_DELIVER);
    }

    function nextimage() {
       imagenumber++;
       if (imagenumber>=images.length) imagenumber=0;
       document.body.style.backgroundImage = images[imagenumber];
    }

    function nextproduct() {
       newproduct(productindex+1);
    }

const pages = [
              'iframePage1.htm',
              'iframePage2.htm',
              'iframeSelect.htm',
              'iframePage5.htm',
              'iframeTanka1.htm'
            ];


      function timerState(cmd) {

        sessiontimer--;
        idTimer.textContent=sessiontimer;

        switch (sessionstate) {
        case STATE_PAUSE:
           if (sessiontimer<=0) {
              // msg.command=MSG_NEXT;
              // sendiframe(msg);
              nextproduct();
              sessiontimer=TIMEPAUSEPAGE;
            }
        break;
        case STATE_STARTING:
            if (sessiontimer<=0) {
                changeState(STATE_PAUSE);
            }
        break;
        case STATE_SELECTING:
            if (sessiontimer<=0) {
                changeState(STATE_PAUSE);
            }
        break;
        case STATE_PAYING:
            if (sessiontimer<=0) {
            changeState(STATE_PAUSE);
            }
        break;
        case STATE_DELIVER:
            if (sessiontimer>0) {
                // Omvandla pcount till kr
                kilos=pcount/productnow.pulses;
                pdeliv=kilos*productnow.price;
                sessionobj.paydelivered=pdeliv.toFixed(2);
                line5.textContent="Pumpat för "+pdeliv.toFixed(2)+" kr";
                if (pumpstate==2) {
                    stopPump();
                    sessionresult="Tankning klar";
                    changeState(STATE_FINISH);
                }
          // sendiframe(sessionobj);
           } else {
                stopPump();
                sessionresult="Timeout vid tankning";
                changeState(STATE_FINISH);
                if (pumpstate!=2) pumpstate=2;
            }
        break;
        case STATE_FINISH:
            // logg (1, "FINISH");
            kilos=pcount/productnow.pulses;
                pdeliv=kilos*productnow.price;
                sessionobj.paydelivered=pdeliv.toFixed(2);
                line5.textContent="Pumpat för "+pdeliv.toFixed(2)+" kr";
            if (sessiontimer<=0) {
                changeState(STATE_PAUSE);
            }
        break;
        }
        timerStuff();

      }


    async function startPump() {
      if (pump>0) {
          await setDigital(pump-1,1);
          await delay(100);
       }
//       pumptimer=TIMEOUT;
       pumpstate=1;
       pulsestart=counter0;
    }

    
    async function stopPump() {
//        pumptimer=1;
        await setDigital(pump-1,0);
        await delay(100);
        d6=0;
        await setDigital(6,d6);
        await delay(100);

    }
/*
    function execCommand(cmdstring) {
      switch (cmdstring) {
      case "Start": logg(1, "START"); startPump(); break;
      case "Stop": stopPump();  break;
      case "": break;
      default: break;
      }
    }
*/

// let intervalId = setInterval(timerStuff, 1000);

// Stop the interval  clearInterval(intervalId);

async function timerStuff() {
    
  if (pumpstate==1) {     // Pumpar
       d6++;
       if (d6>1) d6=0;
       await setDigital(6,d6);
       await delay(100);
       // sendReceivePort("$S00");
  }
  if (pumpstate==2) {     // Uppnått antal pulser
      // stopPump();
  }
  idPumpState.textContent=pumpstate;
  sendReceivePort("$S00");
}


    function showLogg (v) {
      const totalHeight = output.clientHeight;
      if (totalHeight>400) output.textContent="";
      output.textContent += v+'\n';
    }

    function recCallback (v) {
      let s;
      let p1;
      // instatus.textContent=v;
      s=v.substring(0,2);
      if (s=="#A") {
        diginp=v.substring(2,6);
        p1=v.indexOf("V");
        s=v.substring(p1+1);
        counter0=parseInt(s);
        p1=v.indexOf("W");
        s=v.substring(p1+1);
        counter1=parseInt(s);
        idAvailable.textContent=diginp;
        pcount=counter0-pulsestart;
        idCounter.textContent=pcount;
 
        if (pcount > pulsespaid) {
            // stopPump();
            pumpstate=2;
        }
      }
      // logg(1,"HERE:"+s);
    }
    
/*
    function showBuffer (v) {
           output.textContent += v+'\n';
    }
*/
logg(10, 'Program start');
/*
// Skapa en WebSocket-anslutning till Python
const socketPy = new WebSocket(`ws://localhost:8765/`);

// Lyssna efter WebSocket-anslutningens öppnande
socketPy.onopen = function(event) {
//    showSocket("Ansluten!","","");
    console.log("socketPy ansluten till Python!");
};

// Hantera inkommande meddelanden
socketPy.onmessage = function(event) {
    // const data = JSON.parse(event.data);
    console.log("socketPy.onmessage:", event.data);
};

// Hantera eventuella fel med WebSocket
socketPy.onerror = function(error) {
    console.error("WebSocketPy fel:", error);
    // showSocket("socket.onerror",error,"");
};

// Stäng WebSocket-anslutningen när det behövs
socketPy.onclose = function(event) {
    console.log("WebSocketPy stängd.");
    // showSocket("socket.onclose","","");
};
*/

const accessToken = 'o.2fBO20OkMwk7EzsQkSMGQiNzjwEKS4ra'; // Din Pushbullet API-nyckel

// Skapa en WebSocket-anslutning till Pushbullet
const socket = new WebSocket(`wss://stream.pushbullet.com/websocket/${accessToken}`);

// Lyssna efter WebSocket-anslutningens öppnande
socket.onopen = function(event) {
    logg (100, "ws open");
};

// Hantera inkommande meddelanden från Pushbullet
socket.onmessage = function(event) {
    const data = JSON.parse(event.data);
    let l2="";
    let l3="";
    let audio;

    logg (100, "ws onmessage data.type="+data.type);

    // Kontrollera om det är ett pushmeddelande
    if (data.type === 'push') {
//        console.log("push:", data.push);
        if (data.push.type === 'mirror') {
            try {
             l1=`${data.push.application_name}`;
             l2=`${data.push.title}`;
             l3=`${data.push.body}`;
            }
            catch {    }
            logg(100, `ws application_name: ${l1}`);
            logg(100, `ws title: ${l2}`);
            logg(100, `ws body: ${l3}`);
            switch (l1) {
                case "Pushbullet":
                    logg(100, "ws Pushbullet");
                    document.getElementById('tank4').click();
                    // document.getElementById('pulseDTR').click();
                    // audio = new Audio('mp3/pusbullet.mp3'); audio.play();
                    break;
                case "Tapo":
                    logg(100, "ws Tapo");
                // audio = new Audio('mp3/tapo.mp3'); audio.play();
                    break;
                case "Swish":
                    logg(100, "Swish");
                    document.getElementById('tank1').click();
                    // document.getElementById('pulseDTR').click();
                    // audio = new Audio('mp3/swish.mp3'); audio.play();
                    break;
            
                default:
                    break;
            }
            
        }
    }
};

// Hantera eventuella fel med WebSocket
socket.onerror = function(error) {
    logg("ws onerror=",error);
};

// Stäng WebSocket-anslutningen när det behövs
socket.onclose = function(event) {
    logg ("ws onclose");
};
/*
function showSocket(line1,line2,line3) {
        document.getElementById('Message1').textContent = line1 + "   " + line2 + "   " + line3;
}
*/
async function doTanka(nr, button) {
    // socketPy.send("$D01\r\n");
    setDigital(nr-1,1);
    // try {const audio = new Audio('mp3/sound3.mp3'); audio.play(); } catch{};
    for (i=0; i<60; i++) {
    document.getElementById(button).style.backgroundColor = 'red';
    await new Promise(resolve => setTimeout(resolve, 500));
    sendReceivePort("$S00");
    document.getElementById(button).style.backgroundColor = 'green';
    await new Promise(resolve => setTimeout(resolve, 500));
    sendReceivePort("$S00");
    }
    setDigital(nr-1,0);
}

async function doLucka(nr, button) {

    try {const audio = new Audio('mp3/sound4.mp3'); audio.play(); } catch{};
    setDigital(7,1);    // D7 on i minst 1,3 s före puls
    for (i=0; i<8; i++) {
    document.getElementById(button).style.backgroundColor = 'red';
    await delay(250);
    document.getElementById(button).style.backgroundColor = 'green';
    await delay(250);
    }
    setDigital(4,1);
    await delay(200);   // nödvändig yield för att serieporten ska fungera
    setDigital(4,0);

    setDigital(7,0);
}

// document.getElementById('connect').addEventListener('click', connectPort );

/*
  window.addEventListener('message', function(event) {
        // Check the origin of the message for security reasons
        // if (event.origin !== 'http://your-parent-domain.com') { return;}
      try {
        recobj = JSON.parse(event.data);

        if ('productnumber' in recobj) {
           pump=recobj.productnumber;
           sessionobj.productnumber=recobj.productnumber;
           productindex=pump;
           productnow=prods[productindex];
           idProduct.textContent=recobj.productnumber;
        }
        if ('price' in recobj) {
          sessionobj.price=recobj.price;
          p=recobj.price;
          kiloprice=prods[recobj.productnumber].price;
          kilos=p/kiloprice;
          pulses=Math.round(kilos*prods[recobj.productnumber].pulses);
          sessionobj.pulsespaid=pulses;        
          idPulses.textContent=pulses.toFixed(0);
          logg(1,"paid");
        }

        if ('command' in recobj) {
          changeState(recobj.command);
          // execCommand(recobj.command);
        }

        // const obj = JSON.parse('{"name": "Alice"}');
        // console.log(obj);
      } catch (error) {
        logg(7,'Error parsing JSON:'+error.message);
      }

      logg(10, event.data);
  });

  function sendiframe(m) {
      const jsonString = JSON.stringify(m);
      const piframe = document.getElementById('useriframe');
      piframe.contentWindow.postMessage(jsonString, '*');
      logg(10,"Sending:"+jsonString);
  }
*/
  
  function playSound() {
            const audio = new Audio('mp3/file.mp3');
            audio.play();
  }

readLoop();
</script>
</body>
</html>
