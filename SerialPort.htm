<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Serial Port Control</title>
</head>
<body>
    <h1>Serial Port Control</h1>
    <button id="connect">Connect</button>
    <div>

        <button id="setDTR">Set DTR pin 4 +10V</button>
        <button id="clrDTR">Clear DTR -10V</button>
     
<br>
        <button id="setRTS">Set RTS pin 7 +10V</button>
        <button id="clrRTS">Clear RTS -10V</button>
     
    </div>
    
    <div>
        <button id="d0on">Set D0 on</button>
        <button id="d0off">Set D0 off</button>     
    </div>
    
    <div>

        <p>DCD pin 1: <span id="dcd">Unknown</span></p>
        <p>CTS pin 6: <span id="dsr">Unknown</span></p>
        <p>CTS pin 8: <span id="cts">Unknown</span></p>
        <p>RI pin 9: <span id="ri">Unknown</span></p>
    </div>

    <script>
        let port;
console.log('Program start');
const accessToken = 'o.2fBO20OkMwk7EzsQkSMGQiNzjwEKS4ra'; // Din Pushbullet API-nyckel

// Skapa en WebSocket-anslutning till Pushbullet
const socket = new WebSocket(`wss://stream.pushbullet.com/websocket/${accessToken}`);



// Lyssna efter WebSocket-anslutningens öppnande
socket.onopen = function(event) {
    console.log("WebSocket ansluten till Pushbullet!");
};

// Hantera inkommande meddelanden från Pushbullet
socket.onmessage = function(event) {
    const data = JSON.parse(event.data);

    // Kontrollera om det är ett pushmeddelande
    if (data.type === 'push') {
        console.log("Pushbullet-meddelande mottaget:", data.push);

        // Gör något med meddelandet, t.ex. visa i UI
        // Exempel:
        if (data.push.type === 'note') {
            console.log(`Titel: ${data.push.title}`);
            console.log(`Meddelande: ${data.push.body}`);
        }
    }
};

// Hantera eventuella fel med WebSocket
socket.onerror = function(error) {
    console.error("WebSocket fel:", error);
};

// Stäng WebSocket-anslutningen när det behövs
socket.onclose = function(event) {
    console.log("WebSocket stängd.");
};

// readSignals();

        document.getElementById('connect').addEventListener('click', async () => {
            try {
                const ports = await navigator.serial.getPorts();
                const nports = ports.length;
                console.log('ports.length:'+nports.length);
                if(nports>0) {
                    port=ports[0];
                    console.log('Using alreday granted port');
                }
                    else {
                    console.log('Asking user');
                    port = await navigator.serial.requestPort();
                }
                await port.open({ baudRate: 9600 });
                console.log('Connected to port');
                readSignals();
            } catch (error) {
                console.error('Error connecting to port:', error);
            }
        });


        document.getElementById('setRTS').addEventListener('click', async () => {
            if (port) {
                await port.setSignals({ requestToSend: true }); // Ger +10V på pin 7
                console.log('RTS set');
            }
        });

        document.getElementById('setDTR').addEventListener('click', async () => {
            if (port) {
                await port.setSignals({ dataTerminalReady: true });  // Ger +10V på pin 4
                console.log('DTR set');
            }
        });


        document.getElementById('clrRTS').addEventListener('click', async () => {
            if (port) {
                await port.setSignals({ requestToSend: false }); // Ger -10V på pin 7
                console.log('RTS clr');
            }
        });

        document.getElementById('clrDTR').addEventListener('click', async () => {
            if (port) {
                await port.setSignals({ dataTerminalReady: false });  // Ger -10V på pin 4
                console.log('DTR clr');
            }
        });

        document.getElementById('d0on').addEventListener('click', async () => {
            if (port) {
                
                //const textEncoder = new TextEncoderStream();
                //const writableStreamClosed = textEncoder.readable.pipeTo(port.writable);
                //const writer = textEncoder.writable.getWriter();
                
                const writer = port.writable.getWriter();
<<<<<<< HEAD
                const data = new Uint8Array([36, 68, 48, 49, 13, 10]); // $D01\r\n
=======
                const data = new Uint8Array([36, 68, 48, 49, 13, 10]); // hello
>>>>>>> 1f43fe857af03412fa21107311e5f0638341ef85
                await writer.write(data);
                // Allow the serial port to be closed later.
                writer.releaseLock();

                // await writer.write("$D01\r\n");

                console.log('D0 on');
            }
        });

        document.getElementById('d0off').addEventListener('click', async () => {
            if (port) {
                const writer = port.writable.getWriter();
                const data = new Uint8Array([36, 68, 48, 48, 13, 10]); // hello
                await writer.write(data);
                // Allow the serial port to be closed later.
                writer.releaseLock();
            // await writer.write("$D00\r\n");

                console.log('D0 off');
            }
        });

// Turn off Serial Break signal.
// await port.setSignals({ break: false });

<<<<<<< HEAD
async function sendRecieveCommand(Uint8 cmd, Uint8 p1, Uint8 p2) {
    // const encoder = new TextEncoder();
    // const decoder = new TextDecoder();
    if (!port) { return };              
    const writer = port.writable.getWriter();
    const data = new Uint8Array([36, cmd, p1, p2, 13, 10]); // $D01\r\n
    await writer.write(data);
    writer.releaseLock();   // Allow the serial port to be closed later.
    const reader = port.readable.getReader();
    const { value, done } = await reader.read();
    if (done) {
        
        reader.releaseLock();       // Allow the serial port to be closed later.
        break;
    }
  // value is a string.
          console.log(value);

                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }


                console.log('D0 on');
            }
        });


=======
>>>>>>> 1f43fe857af03412fa21107311e5f0638341ef85
async function readSignals() {
/*if(ports.length==0) {
     //    port = await navigator.serial.requestPort();
     }else{
     //    port=ports[0];
     }
     */
    // await port.open({ baudRate: 9600 });
const textDecoder = new TextDecoderStream();
const readableStreamClosed = port.readable.pipeTo(textDecoder.writable);
const reader = textDecoder.readable.getReader();




<<<<<<< HEAD

=======
>>>>>>> 1f43fe857af03412fa21107311e5f0638341ef85
            while (port) {
                const signals = await port.getSignals();
                document.getElementById('dcd').textContent = signals.dataCarrierDetect ? 'Active +10V' : 'Inactive 0V';
                document.getElementById('dsr').textContent = signals.dataSetReady ? 'Active +10V' : 'Inactive 0V';
                document.getElementById('cts').textContent = signals.clearToSend ? 'Active +10V' : 'Inactive 0V';
                document.getElementById('ri').textContent = signals.ringIndicator ? 'Active +10V' : 'Inactive 0V';


// Listen to data coming from the serial device.
// while (true) {
  const { value, done } = await reader.read();
  if (done) {
    // Allow the serial port to be closed later.
    reader.releaseLock();
    break;
  }
  // value is a string.
          console.log(value);

                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }

try {
  
    document.getElementById('connect').click();

    } catch (error) {   console.error('Error connecting to port:', error);

 }


</script>
</body>
</html>
