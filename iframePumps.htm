<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Swisha och tanka!</title>
</head>
<body>
<style>
    body, html {
    width: 100%;
    height: 100%;
    margin: 0;
    /* display: flex; */
    /* display: grid; */
    justify-content: center;  /* Center horizontally */
    align-items: center;      /* Center vertically */
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    }
.usertable {
    border-collapse: collapse;
    font-size: 40px;
    color: white;
    /* background-color: #2d5e17; */
    background-color: rgba(0, 64, 0, 0.8);
/*    background-color: rgba(255, 255, 255, 1); */
    position: relative;

    margin: 0 auto; /* Center the table itself */
    text-align: center; /* Center the content in the table */
    width: 80%; /* Optional: define the table width */
    /* height:80%; */
  }
  .usertablemobile {
    border-collapse: collapse;
    font-size: 40px;
    color: white;
    background-color: rgba(0, 64, 0, 0.6);
    margin: 0 auto; /* Center the table itself */
    text-align: center; /* Center the content in the table */
    width: 100%; /* Optional: define the table width */
    height:100%;       
  }

th, td {
    padding: 8px;
    text-align: center;
    border: 1px solid black;
  
  }
th {
    background-color: #f2f2f2;
}

.devline {
    background-color: rgb(9, 49, 31);
    padding: 1px;
    text-align: center;
    font-size: 20px;
}


.devtable {
    background-color: white;
}

.bigbutt {
    padding: 10px 20px;  /* Adjusts the space inside the button */
    font-size: 24px;      /* Increases the size of the text inside */
    width: 10%px;   /* Set button width */
    height:10%;   /* Set button height */
      /* margin: 20px; */ /* Adds 20px space outside the button on all sides */
      margin: 10px 10px 10px 10px; /* Top, Right, Bottom, Left */
      background-color: #400de7;
      color: white;
      border: black;
      border-radius: 5px;
      cursor: pointer;
      text-decoration: none;
      text-align: center;
      line-height: 50px;   
}

.devbutt {
    padding: 0px 0px;  /* Adjusts the space inside the button */
    font-size: 20px;      /* Increases the size of the text inside */
    width: 100px;   /* Set button width */
    height:100px;   /* Set button height */
      /* margin: 20px; */ /* Adds 20px space outside the button on all sides */
      margin: 0px 0px 0px 0px; /* Top, Right, Bottom, Left */
      background-color: #400de7;
      color: white;
      border: black;
      border-radius: 2px;
      cursor: pointer;
      text-decoration: none;
      text-align: center;
      /* line-height: 50px; */   
}

.tankpre {
            // position: absolute;
            // top: 620px;  /* Adjust the top position */
            // left:400px;  /* Adjust the left position */
            width: 500px;
            height: 200px;
            background-color: #f4f4f4;
            border: 1px solid #ddd;
            padding: 10px;
}
.center-container {
            display: flex;
            justify-content: center; /* Horizontally center */
            align-items: center;     /* Vertically center */
            /* height: 100vh; */    /* 100% of the viewport height */
            background-color: white;
            padding: 10px;
        }
</style>

<table id="utable" class="usertable">
    <tr><td><div id="line1"></div></td></tr>
    <tr><td><div id="line2"></div></td></tr>
    <tr><td><div id="line3"></div></td></tr>
    <tr><td><div id="line4"></div></td></tr>
    <tr><td><div id="line5"></div></td></tr>
    <tr><td><div id="line6"></div></td></tr>
    <tr><td class="devline"><div id="line7"></div></td></tr>
    <tr><td class="devline"><div id="line8"></div></td></tr>
</table>

<script src="js/qrcode.js"></script>
<script src="js/Util.js"></script>
<script>

window.onload = function() {
    changeState(0);
    setDebugLine(debugline);
    CheckScreenSize();
    }

    let portrait=0;
    function CheckScreenSize() {
        let w=window.innerWidth;
        let h=window.innerHeight;
        let p=0;
        const tab = document.getElementById("utable");
        if (w<h) p=1;
        if (p != portrait) {
            portrait=p;
            if (portrait) tab.className = "usertablemobile";
            else tab.className="usertable";
        }
        let uh=tab.offsetHeight ;
        let dt=h-uh;
        if (dt>10) {
            tab.style.top=dt/2+"px";
            // tab.style.transform = "translate(0%, 0%)";
            //tab.style.margin=dt/2+"px";

        } else {
            // tab.style.transform = "translate(0%, 0%)";
            // tab.style.position = "absolute";
            tab.style.top="0 px";
        }
        // const rect = table.getBoundingClientRect();
        // console.log("Table height (getBoundingClientRect):", rect.height);
        dpratio = window.devicePixelRatio;

        logg(100,'size:'+w+'x'+h+' dpratio:'+dpratio+' screen:' + dpratio*window.screen.width + 'x' + dpratio*window.screen.height);

        // logg(100,'resize:' + w + 'x' + h+' portrait='+portrait+" table:"+uh+" dt:"+dt);
    }
/*
    let resizeTimeout;
    window.addEventListener('resize', function() {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout( CheckScreenSize, 200); // Delay of 200 milliseconds
    }
    );
*/
    let resizeTimeout;
    window.addEventListener('resize', CheckScreenSize);
    
    s0=[
    "Välkommen till Östadlund AB",
    'Här finns att hämta',
    '-',
    '-',
    '-',
    '<button class="bigbutt" id="sel4butt" onclick="changeState(1)">Klicka/tryck här för att starta</button>'
    ];
    s1=[
    'Villkor',
    '-Medtag eget kärl för varan',
    '-Bestäm vara och mängd på pekskärmen',
    '-Betala med Swish',
    'Obs! Levered mängd kan avvika med +- 15%',
    '<button class="bigbutt" id="sel4butt" onclick="changeState(2)">Klicka här för att acceptera dessa villkor</button>'
    ];

    s2=[
    'Välj',
    'Välj bland varor nedan',
    '<button class="bigbutt" id="incutt" onclick="select(-1)">Förra</button><button class="bigbutt" id="decbutt" onclick="select(1)">Nästa</button>',
    '-',
    '<button class="bigbutt" id="decbutt" onclick="select(-2)">- Minska</button><button class="bigbutt" id="incbutt" onclick="select(2)">+ Öka</button>',
    '<button class="bigbutt" id="sel4butt" onclick="changeState(3)">Till betalning</button>'
    ];
    s3=[
    "Swisha",
    '',
    '',
    '-',
    // '<img id="idSwishImage" src="img\\qr1.png" width=150 height=150 >',
    '<div class="center-container" id="idSwishImage"></div>',
    '<button class="bigbutt" id="selbutt" onclick="payment(10)">Hoppa över</button>'
    ];
    s4=[
    "Hämta",
    '-',
    'Pumpen är nu öppen, håll inne pumpens knapp för att tanka',
    '-',
    '-',
    '-'
    ];
    s5=[
    'Sessionen avslutas',
    '-',
    '-',
    '-',
    'Tack för besöket',
    'Välkommen åter'
    ];
    debuglines=[
    '<button class="devbutt" style="position: fixed; bottom: 0px; left: 100px;" id="upbutt" onclick="setDebugLine(debugline+1)">Felsök UI</button>',
    '<button class="devbutt" style="position: fixed; bottom: 0px; left: 100px;" id="upbutt" onclick="setDebugLine(debugline+1)">Felsök UI</button>',
    ]; 

    let price=5;
    let kilos=0.0;
    const DELIVER_TIMEOUT=60;
    let debugline=0;
    let loggstring="";
    let dpratio=1;      // 

    function changeTable(s) {
            line1.innerHTML=s[0];
            line2.innerHTML=s[1];
            line3.innerHTML=s[2];
            line4.innerHTML=s[3];
            line5.innerHTML=s[4];
            line6.innerHTML=s[5];
    }

    
    function setDebugLine(dm) {
 /*       if (dm<=0 || dm>=debuglines.length) {
            debugline=0;
        } else {
            debugline++;
            if (debugline<=0 || debugline>=debuglines.length) debugline=0;
        }
*/  
        if (dm<0) dm=0;
        if (dm>1) dm=0;
        debugline=dm;
        line8.innerHTML=debuglines[debugline];
        if (debugline>0) line7.innerHTML=loggstring;
        else line7.innerHTML="-";
        // document.getElementById('idDebugnext').addEventListener('click', setDebugLine );
        // logg(100,"set="+debugline);
    }

// let logglines=[];
// let loggindex=0;

    function logg(v,s) {
        if (loggstring.length>200) loggstring="";
        loggstring +="-----"+v+" "+s;
        if (debugline>0) line7.innerHTML=loggstring;
        // console.log(v+", logg="+s);

    }


function changeState(newstate) {
      
        logg(100, "changeState="+newstate);
        sessionstate=newstate;
                
        switch (newstate) {
        case STATE_PAUSE:
            paid=0;
            pulsespaid=0;
            changeTable(s0);
            newproduct(1);
            sessiontimer=TIMEPAUSEPAGE;

            break;
        case STATE_STARTING:
            changeTable(s1);
            sessiontimer=60;
            break;
        case STATE_SELECTING:
            changeTable(s2);
            newproduct(pump);
            sessiontimer=60;
        break;
        case STATE_PAYING:
            changeTable(s3);
            if (price<1) price=1;
            if (price>10) price=10;
            // document.getElementById("idSwishImage").src = "img\\qr"+price+".png";
            // console.log(phone1, price);
            generateSwishQrCode("idSwishImage", phone1, price, "S1", 200, 1);
            // newproduct(pump);
            newprice(price);
            sessiontimer=60;
            break;
        case STATE_DELIVER: 
            changeTable(s4);
            newproduct(pump);
            // newprice(price);
            sessiontimer=DELIVER_TIMEOUT;         
            kilos=paid/productnow.price;
            pulsespaid=Math.round(kilos*productnow.pulses);
            // idPulses.textContent=pulsespaid.toFixed(0);
            startPump();
        break;
        case STATE_FINISH:
            changeTable(s5);
            newproduct(pump);
            line6.textContent=sessionresult;
            sessiontimer=20;

        break;
       /* case MSG_LOADED:
            // logg(10, "MSG_LOADED");
            sendiframe(sessionobj);
            break;
        */
        }
      }

function newproduct(p) {
    if (p<0) p=prods.length-1;
    if (p>=prods.length) p=0;
    productindex=p;
    pump=p;
   
    productnow=prods[productindex];
    // idProduct.textContent=productnow.number;
    line2.textContent="Pump "+productnow.number+" har "+productnow.volume+" kg "+productnow.name+" "+productnow.price+" kr/kg";
    document.body.style.backgroundImage = 'url('+productnow.image+')';
    // console.log ("PROD img="+productnow.image);
    // line2.textContent=productnow.price+" kr/kg";
    newprice(price);
}

const MINPRICE=1;
const MAXPRICE=10;

function newprice(p) {
    if (p<MINPRICE) p=MINPRICE;
    if (p>MAXPRICE) p=MAXPRICE;
    price=p;
    // line5.textContent="Belopp "+p+" kr";
    kilos=p/productnow.price;
    line4.textContent="Belopp "+p+" kr"+" motsvarar "+kilos.toFixed(1)+" kg"
}

function select(newsel) {

    sessiontimer=60;
    switch (newsel) {
    case 0: msg.command=STATE_PAYING;
            msg.productnumber=productindex;
            msg.price=price;
            changeState(STATE_PAYING);
            // sendup(msg); break;
    case -1: newproduct(productindex-1); break;
    case 1: newproduct(productindex+1); break;
    case -2: newprice(price-1); break;
    case 2: newprice(price+1); break;
    }
}

let sessionstate=0;
let sessionresult="Okänt avslut";
let paid=0;
const TIMEOUT=30;
const TIMEPAUSEPAGE=5;
let pumpstate=0;
let pumptimer=0;
let pump=0;
let pulsespaid=0;
let pulsestart=0;
let pcount=0;
let d6=0;
const sessionobj = { productnumber: "0", pulsespaid: 0, pulsesnow: 0 };

let sessioninterval = setInterval(timerState, 1000);
let sessiontimer=0;
let msg={};
let lastpcount=0;
  
function payment(n) {
       paid=n;
       newprice(paid);
       // changeState(STATE_DELIVER);
    }

    function nextproduct() {
       newproduct(productindex+1);
    }

      function timerState(cmd) {

        sessiontimer--;
        // idTimer.textContent=sessiontimer;

        switch (sessionstate) {
        case STATE_PAUSE:
           if (sessiontimer<=0) {
              // msg.command=MSG_NEXT;
              // sendiframe(msg);
              nextproduct();
              sessiontimer=TIMEPAUSEPAGE;
            }
        break;
        case STATE_STARTING:
            if (sessiontimer<=0) {
                changeState(STATE_PAUSE);
            }
        break;
        case STATE_SELECTING:
            if (sessiontimer<=0) {
                changeState(STATE_PAUSE);
            }
        break;
        case STATE_PAYING:
            if (paid>0) {

            changeState(STATE_DELIVER);
            }
            if (sessiontimer<=0) {
            changeState(STATE_PAUSE);
            }
        break;
        case STATE_DELIVER:
            if (sessiontimer>0) {
                // Omvandla pcount till kr
                if (pcount!=lastpcount) {sessiontimer=DELIVER_TIMEOUT; }
                kilos=pcount/productnow.pulses;
                pdeliv=kilos*productnow.price;
                sessionobj.paydelivered=pdeliv.toFixed(2);
                line5.textContent="Pumpat för "+pdeliv.toFixed(2)+" kr";
                if (pumpstate==2) {
                    // stopPump();
                    sessionresult="Tankning klar";
                    changeState(STATE_FINISH);
                }
          // sendiframe(sessionobj);
           } else {
                stopPump();
                sessionresult="Timeout vid tankning";
                changeState(STATE_FINISH);
                if (pumpstate!=2) pumpstate=2;
            }
        break;
        case STATE_FINISH:
            // logg (1, "FINISH");
            kilos=pcount/productnow.pulses;
                pdeliv=kilos*productnow.price;
                sessionobj.paydelivered=pdeliv.toFixed(2);
                line5.textContent="Pumpat för "+pdeliv.toFixed(2)+" kr";
            if (sessiontimer<=0) {
                changeState(STATE_PAUSE);
            }
        break;
        }
        // timerStuff();

      }


    function startPump() {
        let msg={};
        msg.command="startPump";
        msg.productnumber=productindex;
        msg.pulsespaid=pulsespaid;
        sendup(msg);
    }

    
    function stopPump() {
        let msg={};
        msg.command="stopPump";
        // msg.productnumber=productindex;
        // msg.pulsespaid=pulsespaid;
        sendup(msg);
    }
/*
    function execCommand(cmdstring) {
      switch (cmdstring) {
      case "Start": logg(1, "START"); startPump(); break;
      case "Stop": stopPump();  break;
      case "": break;
      default: break;
      }
    }
*/

/* let intervalId = setInterval(timerStuff, 1000);

// Stop the interval  clearInterval(intervalId);

async function timerStuff() {
    
  if (pumpstate==1) {     // Pumpar
       d6++;
       if (d6>1) d6=0;
       await setDigital(6,d6);
       await delay(100);
       // sendReceivePort("$S00");
  }
  if (pumpstate==2) {     // Uppnått antal pulser
      // stopPump();
  }
//  idPumpState.textContent=pumpstate;
  sendReceivePort("$S00");
}

*/

    
/*
    function showBuffer (v) {
           output.textContent += v+'\n';
    }
*/
// logg(10, 'Program start');
/*
// Skapa en WebSocket-anslutning till Python
const socketPy = new WebSocket(`ws://localhost:8765/`);

// Lyssna efter WebSocket-anslutningens öppnande
socketPy.onopen = function(event) {
//    showSocket("Ansluten!","","");
    console.log("socketPy ansluten till Python!");
};

// Hantera inkommande meddelanden
socketPy.onmessage = function(event) {
    // const data = JSON.parse(event.data);
    console.log("socketPy.onmessage:", event.data);
};

// Hantera eventuella fel med WebSocket
socketPy.onerror = function(error) {
    console.error("WebSocketPy fel:", error);
    // showSocket("socket.onerror",error,"");
};

// Stäng WebSocket-anslutningen när det behövs
socketPy.onclose = function(event) {
    console.log("WebSocketPy stängd.");
    // showSocket("socket.onclose","","");
};
*/


async function doTanka(nr, button) {
    // socketPy.send("$D01\r\n");
    setDigital(nr-1,1);
    // try {const audio = new Audio('mp3/sound3.mp3'); audio.play(); } catch{};
    for (i=0; i<60; i++) {
    document.getElementById(button).style.backgroundColor = 'red';
    await new Promise(resolve => setTimeout(resolve, 500));
    sendReceivePort("$S00");
    document.getElementById(button).style.backgroundColor = 'green';
    await new Promise(resolve => setTimeout(resolve, 500));
    sendReceivePort("$S00");
    }
    setDigital(nr-1,0);
}

async function doLucka(nr, button) {

    try {const audio = new Audio('mp3/sound4.mp3'); audio.play(); } catch{};
    setDigital(7,1);    // D7 on i minst 1,3 s före puls
    for (i=0; i<8; i++) {
    document.getElementById(button).style.backgroundColor = 'red';
    await delay(250);
    document.getElementById(button).style.backgroundColor = 'green';
    await delay(250);
    }
    setDigital(4,1);
    await delay(200);   // nödvändig yield för att serieporten ska fungera
    setDigital(4,0);

    setDigital(7,0);
}

// document.getElementById('connect').addEventListener('click', connectPort );

let recobj = { productnumber: "0", pulsespaid: 0, pulsesnow: 0 };
let upsessionobj = { productnumber: "0", pulsespaid: 0, pulsesnow: 0 };

   // Listen for messages from the parent page
  window.addEventListener('message', function(event) {
      // Check the origin of the message for security reasons
      // if (event.origin !== 'http://your-parent-domain.com') { return;}
      try {
        recobj = JSON.parse(event.data);
        if ('paid' in recobj) {         // Betalning inkommen via Swish e dyl
            paid=recobj.paid;
            
        }
        if ('productnumber' in recobj) {
            // idVara.textContent=recobj.productnumber;
        }
        if ('pcount' in recobj) {
            pcount=recobj.pcount;
        }
        if ('pumpstate' in recobj) {
            pumpstate=recobj.pumpstate;
        }
        if ('loggline' in recobj) {
            logg(100, "Top:"+recobj.loggline);
        }       
//        if ('paydelivered' in recobj) { idDelivered.textContent=recobj.paydelivered; }
//        if ('price' in recobj)  { idPaid.textContent=recobj.price; }
        
        // const obj = JSON.parse('{"name": "Alice"}');
        // console.log(obj);
      } catch (error) {
        console.log('Error parsing JSON:'+error.message);
      }
      // event.source.postMessage("Ok", event.origin); // Return channel
  });

  
  function playSound() {
            const audio = new Audio('mp3/file.mp3');
            audio.play();
  }

</script>
</body>
</html>
